{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Badge from \"@material-ui/core/Badge\";\nimport AuthService from \"../services/authService\";\nimport { useSelector, useDispatch } from \"react-redux\"; // import ChatService from \"../../redux/services/chat-service\";\n\nimport Link from \"next/link\";\nimport { unreadMsg } from \"../../apis/chat-api\";\nimport ConnectyCube from 'connectycube';\nimport appConfig from '../../../appConfig';\nimport { chatUnauthenticated } from \"../../redux/actions/chatUser\";\nimport { chatReset } from \"../../redux/actions/chatConnected\";\nimport chatService from \"../../redux/services/chat-service\";\nimport { unSelectedDialog } from \"../../redux/actions/selectedDialog\";\nimport Router from 'next/router';\n\nvar ChatMessageIcon = function ChatMessageIcon() {\n  _s();\n\n  var authUser = useSelector(function (state) {\n    return state.auth_user.user;\n  });\n  var accessToken = useSelector(function (state) {\n    return state.auth_user.accessToken;\n  });\n  var chatUnreadCount = useSelector(function (state) {\n    return state.chatUnreadCount;\n  });\n\n  var _useState = useState(),\n      count = _useState[0],\n      setcount = _useState[1];\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (authUser && authUser.connectycube_user) {\n      dispatch(chatUnauthenticated());\n      dispatch(chatReset());\n      dispatch(unSelectedDialog());\n      var init = AuthService.init();\n\n      if (init && authUser.connectycube_user) {\n        console.log();\n        AuthService.login({\n          email: authUser.email,\n          password: authUser.connectycube_user.password\n        }).then(function (user) {})[\"catch\"](function (error) {\n          console.log(error);\n        });\n      } // unreadMsg(authUser.id).then((data) => {\n      //     data && setcount(data);\n      // });\n\n    }\n  }, []);\n\n  var connectChat = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var CREDENTIALS, CONFIG, init;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              CREDENTIALS = {\n                email: authUser.email,\n                password: authUser.connectycube_user.password\n              };\n              CONFIG = {\n                on: {\n                  sessionExpired: function sessionExpired(handleResponse, retry) {\n                    // call handleResponse() if you do not want to process a session expiration,\n                    // so an error will be returned to origin request\n                    // handleResponse();\n                    // JS SDK v2\n                    ConnectyCube.createSession().then(retry)[\"catch\"](function (error) {});\n                  }\n                }\n              };\n              _context.next = 4;\n              return ConnectyCube.init.apply(ConnectyCube, _toConsumableArray(appConfig.connectyCubeConfig).concat([CONFIG]));\n\n            case 4:\n              init = _context.sent;\n              console.log(init);\n\n              if (init) {\n                ConnectyCube.login(CREDENTIALS).then(function (session) {\n                  console.log('session', session);\n                })[\"catch\"](function (error) {});\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function connectChat() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var setUpListeners = function setUpListeners() {\n    ConnectyCube.chat.onMessageListener = onMessage;\n    var opponentId = 2066645;\n    var message = {\n      type: 'groupchat',\n      body: \"How are you today?\",\n      extension: {\n        save_to_history: 1,\n        dialog_id: '5f6f3676ca8bf42a744c3f4b'\n      },\n      markable: 1\n    };\n    message = ConnectyCube.chat.send(opponentId, message);\n    console.log('message', message);\n  };\n\n  function onMessage(userId, message) {\n    console.log('[ConnectyCube.chat.onMessageListener] callback:', userId, message);\n  }\n\n  var handleChatClick = function handleChatClick() {\n    if (!accessToken) {\n      window.location.replace('/?signup=open');\n    } else {\n      Router.push('/chat');\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(IconButton, {\n    color: \"inherit\",\n    onClick: handleChatClick\n  }, __jsx(Badge, {\n    badgeContent: chatUnreadCount,\n    color: \"secondary\"\n  }, __jsx(ChatIcon, null))));\n};\n\n_s(ChatMessageIcon, \"FrU6CP3Nau9+6jrSWeI6V2c3wDc=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = ChatMessageIcon;\nexport default ChatMessageIcon;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessageIcon\");","map":{"version":3,"sources":["C:/Users/91911/Downloads/frontend/src/chat/components/ChatIcon.js"],"names":["React","useEffect","useState","ChatIcon","IconButton","Badge","AuthService","useSelector","useDispatch","Link","unreadMsg","ConnectyCube","appConfig","chatUnauthenticated","chatReset","chatService","unSelectedDialog","Router","ChatMessageIcon","authUser","state","auth_user","user","accessToken","chatUnreadCount","count","setcount","dispatch","connectycube_user","init","console","log","login","email","password","then","error","connectChat","CREDENTIALS","CONFIG","on","sessionExpired","handleResponse","retry","createSession","connectyCubeConfig","session","setUpListeners","chat","onMessageListener","onMessage","opponentId","message","type","body","extension","save_to_history","dialog_id","markable","send","userId","handleChatClick","window","location","replace","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Badge from \"@material-ui/core/Badge\";\nimport AuthService from \"../services/authService\";\nimport { useSelector,useDispatch } from \"react-redux\";\n// import ChatService from \"../../redux/services/chat-service\";\nimport Link from \"next/link\";\nimport { unreadMsg } from \"../../apis/chat-api\";\nimport ConnectyCube from 'connectycube'\nimport appConfig from '../../../appConfig'\nimport { chatUnauthenticated } from \"../../redux/actions/chatUser\";\nimport { chatReset } from \"../../redux/actions/chatConnected\";\nimport chatService from \"../../redux/services/chat-service\";\nimport { unSelectedDialog } from \"../../redux/actions/selectedDialog\";\nimport Router from 'next/router';\n\nconst ChatMessageIcon = () => {\n    const authUser = useSelector((state) => state.auth_user.user);\n     const accessToken = useSelector((state) => state.auth_user.accessToken);\n    const chatUnreadCount = useSelector((state) => state.chatUnreadCount);\n\n    const [count, setcount] = useState();\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (authUser && authUser.connectycube_user) {\n            dispatch(chatUnauthenticated())\n            dispatch(chatReset())\n            dispatch(unSelectedDialog())\n            let init = AuthService.init();\n           \n            if (init && authUser.connectycube_user) {\n                console.log()\n                AuthService.login({\n                    email: authUser.email,\n                    password: authUser.connectycube_user.password,\n                }).then((user) => {\n\n                    \n\n                })\n                    .catch((error) => { console.log(error) });\n            }\n\n            // unreadMsg(authUser.id).then((data) => {\n            //     data && setcount(data);\n            // });\n        }\n    }, []);\n\n    const connectChat = async() => {\n        const CREDENTIALS = {\n            email: authUser.email,\n            password: authUser.connectycube_user.password,\n        };\n        const CONFIG = {\n            on: {\n                sessionExpired: (handleResponse, retry) => {\n                    // call handleResponse() if you do not want to process a session expiration,\n                    // so an error will be returned to origin request\n                    // handleResponse();\n\n                    // JS SDK v2\n                    ConnectyCube.createSession()\n                        .then(retry)\n                        .catch((error) => { });\n                },\n            },\n        };\n\n      let init = await  ConnectyCube.init(...appConfig.connectyCubeConfig, CONFIG);\n        console.log(init)\n      if(init){\n          ConnectyCube.login(CREDENTIALS)\n              .then((session) => { \n                  console.log('session',session)\n              })\n              .catch((error) => { });\n      }\n    }\n\n    const setUpListeners = () => {\n        ConnectyCube.chat.onMessageListener = onMessage;\n        const opponentId = 2066645;\n        let message = {\n            type: 'groupchat',\n            body: \"How are you today?\",\n            extension: {\n                save_to_history: 1,\n                dialog_id: '5f6f3676ca8bf42a744c3f4b'\n            },\n            markable: 1\n        };\n\n        message = ConnectyCube.chat.send(opponentId, message);\n        console.log('message', message)\n    }\n\n    function onMessage(userId, message) {\n        console.log('[ConnectyCube.chat.onMessageListener] callback:', userId, message)\n    }\n\n    const handleChatClick=()=>{\n        if (!accessToken) {\n          window.location.replace('/?signup=open');\n        }else{\n            Router.push('/chat');\n        }\n    }\n    return (\n      <div>\n        <IconButton color=\"inherit\" onClick={handleChatClick}>\n          {/* <IconButton aria-label=\"you haves\" color=\"inherit\"> */}\n          <Badge badgeContent={chatUnreadCount} color=\"secondary\">\n            {/* <Link href={accessToken ? '/chat' : '/?signup=open'}> */}\n              <ChatIcon />\n            {/* </Link> */}\n          </Badge>\n        </IconButton>\n      </div>\n    );\n};\n\nexport default ChatMessageIcon;\n"]},"metadata":{},"sourceType":"module"}