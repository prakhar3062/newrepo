{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar updateDialog = function updateDialog(action, dialogs) {\n  var alreadyUpdatedDialog = dialogs.map(function (elem) {\n    if (elem.id === action.dialog.id) {\n      return Object.assign(elem, action.dialog);\n    }\n\n    return elem;\n  });\n  return _toConsumableArray(alreadyUpdatedDialog);\n};\n\nvar lazyFetchMessages = function lazyFetchMessages(action, messages) {\n  var newArr = action.history.reverse().concat(messages[action.dialogId]);\n  return _objectSpread(_objectSpread({}, {}), {}, _defineProperty({}, action.dialogId, newArr));\n};\n\nvar sortedDialog = function sortedDialog(action, dialogs) {\n  var message = action.message,\n      count = action.count;\n  var updateDialog = dialogs.map(function (elem) {\n    if (elem.id === message.dialog_id) {\n      var newObj = {\n        last_message: message.body,\n        last_message_date_sent: message.date_sent,\n        updated_date: message.date_sent,\n        unread_messages_count: count ? elem.unread_messages_count += 1 : elem.unread_messages_count\n      };\n      return Object.assign(elem, newObj);\n    }\n\n    return elem;\n  });\n\n  var sort = function sort(items) {\n    var inverted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return items.sort(function (itemA, itemB) {\n      var result = new Date(itemB.last_message_date_sent * 1000) - new Date(itemA.last_message_date_sent * 1000);\n      return inverted ? !result : result;\n    });\n  };\n\n  var result = sort(updateDialog);\n  return _toConsumableArray(result);\n};\n\nvar updateStatusMessages = function updateStatusMessages(action, message) {\n  if (Object.keys(message).length === 0) {\n    return message;\n  }\n\n  var newMessages = message[action.dialogId].map(function (elem, index) {\n    if (elem.id === action.msgId) {\n      var updateSendStatus = _objectSpread({}, elem);\n\n      updateSendStatus.send_state = action.msg.send_state;\n      return _objectSpread({}, updateSendStatus);\n    }\n\n    return elem;\n  });\n\n  var result = _objectSpread(_objectSpread({}, message), {}, _defineProperty({}, action.dialogId, newMessages));\n\n  return result;\n};\n\nvar fetchUsers = function fetchUsers(action, users) {\n  var newObjUsers = {};\n  action.forEach(function (elem) {\n    newObjUsers[elem.id] = elem;\n  });\n  return _objectSpread(_objectSpread({}, users), newObjUsers);\n};\n\nexport { updateDialog, lazyFetchMessages, sortedDialog, updateStatusMessages, fetchUsers };","map":{"version":3,"sources":["C:/Users/91911/Downloads/frontend/src/redux/reducers/reducer-function.js"],"names":["updateDialog","action","dialogs","alreadyUpdatedDialog","map","elem","id","dialog","Object","assign","lazyFetchMessages","messages","newArr","history","reverse","concat","dialogId","sortedDialog","message","count","dialog_id","newObj","last_message","body","last_message_date_sent","date_sent","updated_date","unread_messages_count","sort","items","inverted","itemA","itemB","result","Date","updateStatusMessages","keys","length","newMessages","index","msgId","updateSendStatus","send_state","msg","fetchUsers","users","newObjUsers","forEach"],"mappings":"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","sourcesContent":["const updateDialog = (action, dialogs) => {\n  const alreadyUpdatedDialog = dialogs.map((elem) => {\n    if (elem.id === action.dialog.id) {\n      return Object.assign(elem, action.dialog);\n    }\n    return elem;\n  });\n  return [...alreadyUpdatedDialog];\n};\n\nconst lazyFetchMessages = (action, messages) => {\n  const newArr = action.history.reverse().concat(messages[action.dialogId]);\n  return { ...{}, [action.dialogId]: newArr };\n};\n\nconst sortedDialog = (action, dialogs) => {\n  const { message, count } = action;\n  const updateDialog = dialogs.map((elem) => {\n    if (elem.id === message.dialog_id) {\n      const newObj = {\n        last_message: message.body,\n        last_message_date_sent: message.date_sent,\n        updated_date: message.date_sent,\n        unread_messages_count: count\n          ? (elem.unread_messages_count += 1)\n          : elem.unread_messages_count,\n      };\n      return Object.assign(elem, newObj);\n    }\n    return elem;\n  });\n\n  const sort = (items, inverted = false) =>\n    items.sort((itemA, itemB) => {\n      const result =\n        new Date(itemB.last_message_date_sent * 1000) -\n        new Date(itemA.last_message_date_sent * 1000);\n      return inverted ? !result : result;\n    });\n\n  const result = sort(updateDialog);\n\n  return [...result];\n};\n\nconst updateStatusMessages = (action, message) => {\n  if (Object.keys(message).length === 0) {\n    return message;\n  }\n\n  const newMessages = message[action.dialogId].map((elem, index) => {\n    if (elem.id === action.msgId) {\n      const updateSendStatus = { ...elem };\n      updateSendStatus.send_state = action.msg.send_state;\n      return { ...updateSendStatus };\n    }\n    return elem;\n  });\n\n  const result = { ...message, [action.dialogId]: newMessages };\n\n  return result;\n};\n\nconst fetchUsers = (action, users) => {\n  const newObjUsers = {};\n  action.forEach((elem) => {\n    newObjUsers[elem.id] = elem;\n  });\n  return { ...users, ...newObjUsers };\n};\n\nexport {\n  updateDialog,\n  lazyFetchMessages,\n  sortedDialog,\n  updateStatusMessages,\n  fetchUsers,\n};\n"]},"metadata":{},"sourceType":"module"}