{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Badge from \"@material-ui/core/Badge\";\nimport AuthService from \"../services/authService\";\nimport { useSelector, useDispatch } from \"react-redux\"; // import ChatService from \"../../redux/services/chat-service\";\n\nimport Link from \"next/link\";\nimport { unreadMsg } from \"../../apis/chat-api\";\nimport ConnectyCube from 'connectycube';\nimport appConfig from '../../../appConfig';\nimport { chatUnauthenticated } from \"../../redux/actions/chatUser\";\nimport { chatReset } from \"../../redux/actions/chatConnected\";\nimport chatService from \"../../redux/services/chat-service\";\nimport { unSelectedDialog } from \"../../redux/actions/selectedDialog\";\nimport Router from 'next/router';\n\nconst ChatMessageIcon = () => {\n  const authUser = useSelector(state => state.auth_user.user);\n  const accessToken = useSelector(state => state.auth_user.accessToken);\n  const chatUnreadCount = useSelector(state => state.chatUnreadCount);\n  const {\n    0: count,\n    1: setcount\n  } = useState();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (authUser && authUser.connectycube_user) {\n      dispatch(chatUnauthenticated());\n      dispatch(chatReset());\n      dispatch(unSelectedDialog());\n      let init = AuthService.init();\n\n      if (init && authUser.connectycube_user) {\n        console.log();\n        AuthService.login({\n          email: authUser.email,\n          password: authUser.connectycube_user.password\n        }).then(user => {}).catch(error => {\n          console.log(error);\n        });\n      } // unreadMsg(authUser.id).then((data) => {\n      //     data && setcount(data);\n      // });\n\n    }\n  }, []);\n\n  const connectChat = async () => {\n    const CREDENTIALS = {\n      email: authUser.email,\n      password: authUser.connectycube_user.password\n    };\n    const CONFIG = {\n      on: {\n        sessionExpired: (handleResponse, retry) => {\n          // call handleResponse() if you do not want to process a session expiration,\n          // so an error will be returned to origin request\n          // handleResponse();\n          // JS SDK v2\n          ConnectyCube.createSession().then(retry).catch(error => {});\n        }\n      }\n    };\n    let init = await ConnectyCube.init(...appConfig.connectyCubeConfig, CONFIG);\n    console.log(init);\n\n    if (init) {\n      ConnectyCube.login(CREDENTIALS).then(session => {\n        console.log('session', session);\n      }).catch(error => {});\n    }\n  };\n\n  const setUpListeners = () => {\n    ConnectyCube.chat.onMessageListener = onMessage;\n    const opponentId = 2066645;\n    let message = {\n      type: 'groupchat',\n      body: \"How are you today?\",\n      extension: {\n        save_to_history: 1,\n        dialog_id: '5f6f3676ca8bf42a744c3f4b'\n      },\n      markable: 1\n    };\n    message = ConnectyCube.chat.send(opponentId, message);\n    console.log('message', message);\n  };\n\n  function onMessage(userId, message) {\n    console.log('[ConnectyCube.chat.onMessageListener] callback:', userId, message);\n  }\n\n  const handleChatClick = () => {\n    if (!accessToken) {\n      window.location.replace('/?signup=open');\n    } else {\n      Router.push('/chat');\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(IconButton, {\n    color: \"inherit\",\n    onClick: handleChatClick\n  }, __jsx(Badge, {\n    badgeContent: chatUnreadCount,\n    color: \"secondary\"\n  }, __jsx(ChatIcon, null))));\n};\n\nexport default ChatMessageIcon;","map":{"version":3,"sources":["C:/Users/91911/Downloads/frontend/src/chat/components/ChatIcon.js"],"names":["React","useEffect","useState","ChatIcon","IconButton","Badge","AuthService","useSelector","useDispatch","Link","unreadMsg","ConnectyCube","appConfig","chatUnauthenticated","chatReset","chatService","unSelectedDialog","Router","ChatMessageIcon","authUser","state","auth_user","user","accessToken","chatUnreadCount","count","setcount","dispatch","connectycube_user","init","console","log","login","email","password","then","catch","error","connectChat","CREDENTIALS","CONFIG","on","sessionExpired","handleResponse","retry","createSession","connectyCubeConfig","session","setUpListeners","chat","onMessageListener","onMessage","opponentId","message","type","body","extension","save_to_history","dialog_id","markable","send","userId","handleChatClick","window","location","replace","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Badge from \"@material-ui/core/Badge\";\nimport AuthService from \"../services/authService\";\nimport { useSelector,useDispatch } from \"react-redux\";\n// import ChatService from \"../../redux/services/chat-service\";\nimport Link from \"next/link\";\nimport { unreadMsg } from \"../../apis/chat-api\";\nimport ConnectyCube from 'connectycube'\nimport appConfig from '../../../appConfig'\nimport { chatUnauthenticated } from \"../../redux/actions/chatUser\";\nimport { chatReset } from \"../../redux/actions/chatConnected\";\nimport chatService from \"../../redux/services/chat-service\";\nimport { unSelectedDialog } from \"../../redux/actions/selectedDialog\";\nimport Router from 'next/router';\n\nconst ChatMessageIcon = () => {\n    const authUser = useSelector((state) => state.auth_user.user);\n     const accessToken = useSelector((state) => state.auth_user.accessToken);\n    const chatUnreadCount = useSelector((state) => state.chatUnreadCount);\n\n    const [count, setcount] = useState();\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (authUser && authUser.connectycube_user) {\n            dispatch(chatUnauthenticated())\n            dispatch(chatReset())\n            dispatch(unSelectedDialog())\n            let init = AuthService.init();\n           \n            if (init && authUser.connectycube_user) {\n                console.log()\n                AuthService.login({\n                    email: authUser.email,\n                    password: authUser.connectycube_user.password,\n                }).then((user) => {\n\n                    \n\n                })\n                    .catch((error) => { console.log(error) });\n            }\n\n            // unreadMsg(authUser.id).then((data) => {\n            //     data && setcount(data);\n            // });\n        }\n    }, []);\n\n    const connectChat = async() => {\n        const CREDENTIALS = {\n            email: authUser.email,\n            password: authUser.connectycube_user.password,\n        };\n        const CONFIG = {\n            on: {\n                sessionExpired: (handleResponse, retry) => {\n                    // call handleResponse() if you do not want to process a session expiration,\n                    // so an error will be returned to origin request\n                    // handleResponse();\n\n                    // JS SDK v2\n                    ConnectyCube.createSession()\n                        .then(retry)\n                        .catch((error) => { });\n                },\n            },\n        };\n\n      let init = await  ConnectyCube.init(...appConfig.connectyCubeConfig, CONFIG);\n        console.log(init)\n      if(init){\n          ConnectyCube.login(CREDENTIALS)\n              .then((session) => { \n                  console.log('session',session)\n              })\n              .catch((error) => { });\n      }\n    }\n\n    const setUpListeners = () => {\n        ConnectyCube.chat.onMessageListener = onMessage;\n        const opponentId = 2066645;\n        let message = {\n            type: 'groupchat',\n            body: \"How are you today?\",\n            extension: {\n                save_to_history: 1,\n                dialog_id: '5f6f3676ca8bf42a744c3f4b'\n            },\n            markable: 1\n        };\n\n        message = ConnectyCube.chat.send(opponentId, message);\n        console.log('message', message)\n    }\n\n    function onMessage(userId, message) {\n        console.log('[ConnectyCube.chat.onMessageListener] callback:', userId, message)\n    }\n\n    const handleChatClick=()=>{\n        if (!accessToken) {\n          window.location.replace('/?signup=open');\n        }else{\n            Router.push('/chat');\n        }\n    }\n    return (\n      <div>\n        <IconButton color=\"inherit\" onClick={handleChatClick}>\n          {/* <IconButton aria-label=\"you haves\" color=\"inherit\"> */}\n          <Badge badgeContent={chatUnreadCount} color=\"secondary\">\n            {/* <Link href={accessToken ? '/chat' : '/?signup=open'}> */}\n              <ChatIcon />\n            {/* </Link> */}\n          </Badge>\n        </IconButton>\n      </div>\n    );\n};\n\nexport default ChatMessageIcon;\n"]},"metadata":{},"sourceType":"module"}