{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\n\nfunction useNavbar() {\n  _s();\n\n  var _useState = useState(false),\n      isScrolled = _useState[0],\n      setIsScrolled = _useState[1];\n\n  var navBarRef = useRef(null);\n\n  var handleScroll = function handleScroll(e) {\n    var offset = e.srcElement.scrollingElement.scrollTop;\n\n    if (navBarRef.current) {\n      setIsScrolled(offset > navBarRef.current.clientHeight);\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener('scroll', handleScroll);\n    return function () {\n      window.removeEventListener('scroll', function () {\n        return handleScroll;\n      });\n    };\n  }, []);\n  return {\n    navBarRef: navBarRef,\n    isScrolled: isScrolled\n  };\n}\n\n_s(useNavbar, \"pDqXJUhqUzjAHNsslFfDnK4d/vY=\");\n\nexport default useNavbar;","map":{"version":3,"sources":["C:/Users/91911/Downloads/frontend/src/Layout/Header/utils/useNavbar.js"],"names":["useState","useEffect","useRef","useNavbar","isScrolled","setIsScrolled","navBarRef","handleScroll","e","offset","srcElement","scrollingElement","scrollTop","current","clientHeight","window","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;;AAEA,SAASC,SAAT,GAAsB;AAAA;;AAAA,kBACgBH,QAAQ,CAAC,KAAD,CADxB;AAAA,MACbI,UADa;AAAA,MACDC,aADC;;AAGpB,MAAMC,SAAS,GAAGJ,MAAM,CAAC,IAAD,CAAxB;;AAEA,MAAMK,YAAY,GAAG,SAAfA,YAAe,CAAAC,CAAC,EAAI;AACxB,QAAMC,MAAM,GAAGD,CAAC,CAACE,UAAF,CAAaC,gBAAb,CAA8BC,SAA7C;;AAEA,QAAIN,SAAS,CAACO,OAAd,EAAuB;AACrBR,MAAAA,aAAa,CAACI,MAAM,GAAGH,SAAS,CAACO,OAAV,CAAkBC,YAA5B,CAAb;AACD;AACF,GAND;;AAQAb,EAAAA,SAAS,CAAC,YAAM;AACdc,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCT,YAAlC;AAEA,WAAO,YAAM;AACXQ,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqC;AAAA,eAAMV,YAAN;AAAA,OAArC;AACD,KAFD;AAGD,GANQ,EAMN,EANM,CAAT;AAQA,SAAO;AACLD,IAAAA,SAAS,EAATA,SADK;AAELF,IAAAA,UAAU,EAAVA;AAFK,GAAP;AAID;;GAzBQD,S;;AA2BT,eAAeA,SAAf","sourcesContent":["import { useState, useEffect, useRef } from 'react'\r\n\r\nfunction useNavbar () {\r\n  const [isScrolled, setIsScrolled] = useState(false)\r\n\r\n  const navBarRef = useRef(null)\r\n\r\n  const handleScroll = e => {\r\n    const offset = e.srcElement.scrollingElement.scrollTop\r\n\r\n    if (navBarRef.current) {\r\n      setIsScrolled(offset > navBarRef.current.clientHeight)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll)\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', () => handleScroll)\r\n    }\r\n  }, [])\r\n\r\n  return {\r\n    navBarRef,\r\n    isScrolled\r\n  }\r\n}\r\n\r\nexport default useNavbar\r\n"]},"metadata":{},"sourceType":"module"}