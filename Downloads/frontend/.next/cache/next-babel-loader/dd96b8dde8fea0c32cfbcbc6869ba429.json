{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ConnectyCube from 'connectycube';\nimport appConfig from '../../../appConfig';\nimport User from '../models/user';\nimport store from '../../redux/store'; // import { setCurrentUser } from '../actions/currentUser'\n\nimport { getImageLinkFromUID } from '../helpers/file';\nimport { chatAuthenticated } from '../../redux/actions/chatUser';\nimport { chatConnection } from '../../redux/actions/chatConnected';\nimport { chatUnreadCount } from '../../redux/actions/chatUnread';\nimport { pushMessage } from '../../redux/actions/messages'; // import { LogOut } from '../reducers/index'\n\nclass AuthService {\n  async init() {\n    const res = await ConnectyCube.init(...appConfig.connectyCubeConfig);\n    return res; // await ConnectyCube.createSession({\n    //     email:'test@test.com',\n    //     password:'test'\n    // })\n    // return this.autologin()\n  } // async autologin() {\n  //     const checkUserSessionFromStore = await this.getUserSession()\n  //     if (checkUserSessionFromStore) {\n  //         const data = JSON.parse(checkUserSessionFromStore)\n  //         await this.signIn({ login: data.login, password: data.password })\n  //         return 'home'\n  //     } else { return 'auth' }\n  // }\n\n\n  async login(params) {\n    const session = await ConnectyCube.createSession(params);\n    const currentUser = new User(session.user);\n    session.user.avatar = getImageLinkFromUID(session.user.avatar); // work around\n\n    session.user.full_name = session.user.login;\n    store.dispatch(chatAuthenticated(session));\n    const customSession = Object.assign({}, currentUser, {\n      password: params.password\n    });\n    this.setUserSession(customSession);\n    this.connect(customSession.id, customSession.password);\n  } // async signUp(params) {\n  //     await ConnectyCube.createSession()\n  //     await ConnectyCube.users.signup(params)\n  //     return this.signIn(params)\n  // }\n\n\n  async connect(userId, password) {\n    const isConnected = ConnectyCube.chat.isConnected;\n\n    if (isConnected) {\n      store.dispatch(chatConnection());\n      this.getUnread();\n    } else {\n      await ConnectyCube.chat.connect({\n        userId,\n        password\n      }).then((error, contactlist) => {\n        this.setUpListeners();\n        store.dispatch(chatConnection());\n        this.getUnread();\n      });\n    }\n  }\n\n  async getUnread() {\n    await ConnectyCube.chat.message.unreadCount().then(result => {\n      store.dispatch(chatUnreadCount(result.total));\n      console.log('unread', reasult);\n    }).catch(error => {});\n  }\n\n  async setUpListeners() {\n    ConnectyCube.chat.onMessageListener = this.onMessage.bind(this);\n  }\n\n  onMessage(userId, message) {\n    let user = localStorage.getItem(\"user\");\n    user = user ? JSON.parse(user) : \"\";\n    console.log(message, userId, user.connectycube_user.connectycube_id);\n\n    if (!user || !user.connectycube_user || userId == user.connectycube_user.connectycube_id) {\n      return;\n    }\n\n    message.message = message.body;\n    message.device_token = user.device_token;\n    message.notif = true;\n    store.dispatch(pushMessage(message));\n  }\n\n  setUserSession(userSession) {\n    return localStorage.setItem(AuthService.CURRENT_USER_SESSION_KEY, JSON.stringify(userSession));\n  }\n\n  getUserSession() {\n    return localStorage.getItem(AuthService.CURRENT_USER_SESSION_KEY);\n  } // async logout() {\n  //     localStorage.clear()\n  //     await ConnectyCube.logout()\n  //     store.dispatch(LogOut())\n  // }\n\n\n}\n\n_defineProperty(AuthService, \"CURRENT_USER_SESSION_KEY\", \"CURRENT_USER_SESSION_KEY\");\n\n_defineProperty(AuthService, \"DEVICE_TOKEN_KEY\", \"DEVICE_TOKEN_KEY\");\n\nconst authService = new AuthService();\nObject.freeze(authService);\nexport default authService;","map":{"version":3,"sources":["C:/Users/91911/Downloads/frontend/src/chat/services/authService.js"],"names":["ConnectyCube","appConfig","User","store","getImageLinkFromUID","chatAuthenticated","chatConnection","chatUnreadCount","pushMessage","AuthService","init","res","connectyCubeConfig","login","params","session","createSession","currentUser","user","avatar","full_name","dispatch","customSession","Object","assign","password","setUserSession","connect","id","userId","isConnected","chat","getUnread","then","error","contactlist","setUpListeners","message","unreadCount","result","total","console","log","reasult","catch","onMessageListener","onMessage","bind","localStorage","getItem","JSON","parse","connectycube_user","connectycube_id","body","device_token","notif","userSession","setItem","CURRENT_USER_SESSION_KEY","stringify","getUserSession","authService","freeze"],"mappings":"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","sourcesContent":["import ConnectyCube from 'connectycube'\nimport appConfig from '../../../appConfig'\nimport User from '../models/user'\nimport store from '../../redux/store'\n// import { setCurrentUser } from '../actions/currentUser'\nimport { getImageLinkFromUID } from '../helpers/file'\nimport { chatAuthenticated } from '../../redux/actions/chatUser'\nimport { chatConnection } from '../../redux/actions/chatConnected'\nimport { chatUnreadCount } from '../../redux/actions/chatUnread'\nimport { pushMessage } from '../../redux/actions/messages'\n// import { LogOut } from '../reducers/index'\n\nclass AuthService {\n  static CURRENT_USER_SESSION_KEY = \"CURRENT_USER_SESSION_KEY\";\n  static DEVICE_TOKEN_KEY = \"DEVICE_TOKEN_KEY\";\n\n  async init() {\n    const res = await ConnectyCube.init(...appConfig.connectyCubeConfig);\n    return res;\n\n    // await ConnectyCube.createSession({\n    //     email:'test@test.com',\n    //     password:'test'\n    // })\n    // return this.autologin()\n  }\n\n  // async autologin() {\n  //     const checkUserSessionFromStore = await this.getUserSession()\n  //     if (checkUserSessionFromStore) {\n  //         const data = JSON.parse(checkUserSessionFromStore)\n  //         await this.signIn({ login: data.login, password: data.password })\n  //         return 'home'\n  //     } else { return 'auth' }\n  // }\n\n  async login(params) {\n    const session = await ConnectyCube.createSession(params);\n    const currentUser = new User(session.user);\n    session.user.avatar = getImageLinkFromUID(session.user.avatar);\n    // work around\n    session.user.full_name = session.user.login;\n    store.dispatch(chatAuthenticated(session));\n    const customSession = Object.assign({}, currentUser, {\n      password: params.password,\n    });\n    this.setUserSession(customSession);\n    this.connect(customSession.id, customSession.password);\n  }\n\n  // async signUp(params) {\n  //     await ConnectyCube.createSession()\n  //     await ConnectyCube.users.signup(params)\n  //     return this.signIn(params)\n  // }\n\n  async connect(userId, password) {\n    const isConnected = ConnectyCube.chat.isConnected;\n    if (isConnected) {\n      store.dispatch(chatConnection());\n      this.getUnread()\n    } else {\n      await ConnectyCube.chat.connect({ userId, password }).then((error, contactlist) => {\n        this.setUpListeners()\n        store.dispatch(chatConnection());\n        this.getUnread()\n      })\n    }\n\n  }\n\n  async getUnread() {\n    await ConnectyCube.chat.message\n      .unreadCount()\n      .then(result => {\n        store.dispatch(chatUnreadCount(result.total))\n        console.log('unread', reasult)\n      })\n      .catch(error => { });\n  }\n\n  async setUpListeners() {\n    ConnectyCube.chat.onMessageListener = this.onMessage.bind(this);\n  }\n\n  onMessage(userId, message) {\n    let user = localStorage.getItem(\"user\");\n    user = user ? JSON.parse(user) : \"\";\n    console.log(message, userId, user.connectycube_user.connectycube_id)\n    if (!user || !user.connectycube_user || userId == user.connectycube_user.connectycube_id) {\n      return\n    }\n\n    message.message = message.body\n    message.device_token = user.device_token\n    message.notif = true\n    store.dispatch(pushMessage(message))\n\n  }\n\n  setUserSession(userSession) {\n    return localStorage.setItem(AuthService.CURRENT_USER_SESSION_KEY, JSON.stringify(userSession))\n  }\n\n  getUserSession() {\n    return localStorage.getItem(AuthService.CURRENT_USER_SESSION_KEY);\n  }\n\n  // async logout() {\n  //     localStorage.clear()\n  //     await ConnectyCube.logout()\n  //     store.dispatch(LogOut())\n  // }\n}\n\nconst authService = new AuthService()\n\nObject.freeze(authService)\n\nexport default authService"]},"metadata":{},"sourceType":"module"}