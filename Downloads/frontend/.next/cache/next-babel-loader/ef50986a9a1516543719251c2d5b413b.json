{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport ConnectyCube from 'connectycube';\nimport appConfig from '../../../appConfig';\nimport User from '../models/user';\nimport store from '../../redux/store'; // import { setCurrentUser } from '../actions/currentUser'\n\nimport { getImageLinkFromUID } from '../helpers/file';\nimport { chatAuthenticated } from '../../redux/actions/chatUser';\nimport { chatConnection } from '../../redux/actions/chatConnected';\nimport { chatUnreadCount } from '../../redux/actions/chatUnread';\nimport { pushMessage } from '../../redux/actions/messages'; // import { LogOut } from '../reducers/index'\n\nvar AuthService = /*#__PURE__*/function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n  }\n\n  _createClass(AuthService, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return ConnectyCube.init.apply(ConnectyCube, _toConsumableArray(appConfig.connectyCubeConfig));\n\n              case 2:\n                res = _context.sent;\n                return _context.abrupt(\"return\", res);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }() // async autologin() {\n    //     const checkUserSessionFromStore = await this.getUserSession()\n    //     if (checkUserSessionFromStore) {\n    //         const data = JSON.parse(checkUserSessionFromStore)\n    //         await this.signIn({ login: data.login, password: data.password })\n    //         return 'home'\n    //     } else { return 'auth' }\n    // }\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {\n        var session, currentUser, customSession;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return ConnectyCube.createSession(params);\n\n              case 2:\n                session = _context2.sent;\n                currentUser = new User(session.user);\n                session.user.avatar = getImageLinkFromUID(session.user.avatar); // work around\n\n                session.user.full_name = session.user.login;\n                store.dispatch(chatAuthenticated(session));\n                customSession = Object.assign({}, currentUser, {\n                  password: params.password\n                });\n                this.setUserSession(customSession);\n                this.connect(customSession.id, customSession.password);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }() // async signUp(params) {\n    //     await ConnectyCube.createSession()\n    //     await ConnectyCube.users.signup(params)\n    //     return this.signIn(params)\n    // }\n\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(userId, password) {\n        var _this = this;\n\n        var isConnected;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                isConnected = ConnectyCube.chat.isConnected;\n\n                if (!isConnected) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                store.dispatch(chatConnection());\n                this.getUnread();\n                _context3.next = 8;\n                break;\n\n              case 6:\n                _context3.next = 8;\n                return ConnectyCube.chat.connect({\n                  userId: userId,\n                  password: password\n                }).then(function (error, contactlist) {\n                  _this.setUpListeners();\n\n                  store.dispatch(chatConnection());\n\n                  _this.getUnread();\n                });\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function connect(_x2, _x3) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"getUnread\",\n    value: function () {\n      var _getUnread = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return ConnectyCube.chat.message.unreadCount().then(function (result) {\n                  store.dispatch(chatUnreadCount(result.total));\n                  console.log('unread', reasult);\n                })[\"catch\"](function (error) {});\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getUnread() {\n        return _getUnread.apply(this, arguments);\n      }\n\n      return getUnread;\n    }()\n  }, {\n    key: \"setUpListeners\",\n    value: function () {\n      var _setUpListeners = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                ConnectyCube.chat.onMessageListener = this.onMessage.bind(this);\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function setUpListeners() {\n        return _setUpListeners.apply(this, arguments);\n      }\n\n      return setUpListeners;\n    }()\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(userId, message) {\n      var user = localStorage.getItem(\"user\");\n      user = user ? JSON.parse(user) : \"\";\n      console.log(message, userId, user.connectycube_user.connectycube_id);\n\n      if (!user || !user.connectycube_user || userId == user.connectycube_user.connectycube_id) {\n        return;\n      }\n\n      message.message = message.body;\n      message.device_token = user.device_token;\n      message.notif = true;\n      store.dispatch(pushMessage(message));\n    }\n  }, {\n    key: \"setUserSession\",\n    value: function setUserSession(userSession) {\n      return localStorage.setItem(AuthService.CURRENT_USER_SESSION_KEY, JSON.stringify(userSession));\n    }\n  }, {\n    key: \"getUserSession\",\n    value: function getUserSession() {\n      return localStorage.getItem(AuthService.CURRENT_USER_SESSION_KEY);\n    } // async logout() {\n    //     localStorage.clear()\n    //     await ConnectyCube.logout()\n    //     store.dispatch(LogOut())\n    // }\n\n  }]);\n\n  return AuthService;\n}();\n\n_defineProperty(AuthService, \"CURRENT_USER_SESSION_KEY\", \"CURRENT_USER_SESSION_KEY\");\n\n_defineProperty(AuthService, \"DEVICE_TOKEN_KEY\", \"DEVICE_TOKEN_KEY\");\n\nvar authService = new AuthService();\nObject.freeze(authService);\nexport default authService;","map":{"version":3,"sources":["C:/Users/91911/Downloads/frontend/src/chat/services/authService.js"],"names":["ConnectyCube","appConfig","User","store","getImageLinkFromUID","chatAuthenticated","chatConnection","chatUnreadCount","pushMessage","AuthService","init","connectyCubeConfig","res","params","createSession","session","currentUser","user","avatar","full_name","login","dispatch","customSession","Object","assign","password","setUserSession","connect","id","userId","isConnected","chat","getUnread","then","error","contactlist","setUpListeners","message","unreadCount","result","total","console","log","reasult","onMessageListener","onMessage","bind","localStorage","getItem","JSON","parse","connectycube_user","connectycube_id","body","device_token","notif","userSession","setItem","CURRENT_USER_SESSION_KEY","stringify","authService","freeze"],"mappings":"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","sourcesContent":["import ConnectyCube from 'connectycube'\nimport appConfig from '../../../appConfig'\nimport User from '../models/user'\nimport store from '../../redux/store'\n// import { setCurrentUser } from '../actions/currentUser'\nimport { getImageLinkFromUID } from '../helpers/file'\nimport { chatAuthenticated } from '../../redux/actions/chatUser'\nimport { chatConnection } from '../../redux/actions/chatConnected'\nimport { chatUnreadCount } from '../../redux/actions/chatUnread'\nimport { pushMessage } from '../../redux/actions/messages'\n// import { LogOut } from '../reducers/index'\n\nclass AuthService {\n  static CURRENT_USER_SESSION_KEY = \"CURRENT_USER_SESSION_KEY\";\n  static DEVICE_TOKEN_KEY = \"DEVICE_TOKEN_KEY\";\n\n  async init() {\n    const res = await ConnectyCube.init(...appConfig.connectyCubeConfig);\n    return res;\n\n    // await ConnectyCube.createSession({\n    //     email:'test@test.com',\n    //     password:'test'\n    // })\n    // return this.autologin()\n  }\n\n  // async autologin() {\n  //     const checkUserSessionFromStore = await this.getUserSession()\n  //     if (checkUserSessionFromStore) {\n  //         const data = JSON.parse(checkUserSessionFromStore)\n  //         await this.signIn({ login: data.login, password: data.password })\n  //         return 'home'\n  //     } else { return 'auth' }\n  // }\n\n  async login(params) {\n    const session = await ConnectyCube.createSession(params);\n    const currentUser = new User(session.user);\n    session.user.avatar = getImageLinkFromUID(session.user.avatar);\n    // work around\n    session.user.full_name = session.user.login;\n    store.dispatch(chatAuthenticated(session));\n    const customSession = Object.assign({}, currentUser, {\n      password: params.password,\n    });\n    this.setUserSession(customSession);\n    this.connect(customSession.id, customSession.password);\n  }\n\n  // async signUp(params) {\n  //     await ConnectyCube.createSession()\n  //     await ConnectyCube.users.signup(params)\n  //     return this.signIn(params)\n  // }\n\n  async connect(userId, password) {\n    const isConnected = ConnectyCube.chat.isConnected;\n    if (isConnected) {\n      store.dispatch(chatConnection());\n      this.getUnread()\n    } else {\n      await ConnectyCube.chat.connect({ userId, password }).then((error, contactlist) => {\n        this.setUpListeners()\n        store.dispatch(chatConnection());\n        this.getUnread()\n      })\n    }\n\n  }\n\n  async getUnread() {\n    await ConnectyCube.chat.message\n      .unreadCount()\n      .then(result => {\n        store.dispatch(chatUnreadCount(result.total))\n        console.log('unread', reasult)\n      })\n      .catch(error => { });\n  }\n\n  async setUpListeners() {\n    ConnectyCube.chat.onMessageListener = this.onMessage.bind(this);\n  }\n\n  onMessage(userId, message) {\n    let user = localStorage.getItem(\"user\");\n    user = user ? JSON.parse(user) : \"\";\n    console.log(message, userId, user.connectycube_user.connectycube_id)\n    if (!user || !user.connectycube_user || userId == user.connectycube_user.connectycube_id) {\n      return\n    }\n\n    message.message = message.body\n    message.device_token = user.device_token\n    message.notif = true\n    store.dispatch(pushMessage(message))\n\n  }\n\n  setUserSession(userSession) {\n    return localStorage.setItem(AuthService.CURRENT_USER_SESSION_KEY, JSON.stringify(userSession))\n  }\n\n  getUserSession() {\n    return localStorage.getItem(AuthService.CURRENT_USER_SESSION_KEY);\n  }\n\n  // async logout() {\n  //     localStorage.clear()\n  //     await ConnectyCube.logout()\n  //     store.dispatch(LogOut())\n  // }\n}\n\nconst authService = new AuthService()\n\nObject.freeze(authService)\n\nexport default authService"]},"metadata":{},"sourceType":"module"}