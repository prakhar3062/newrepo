{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { PUSH_MESSAGE, SET_MESSAGES, DELETE_ALL_MESSAGES, LAZY_FETCH_MESSAGES, UPDATE_MESSAGES } from \"../actionTypes/messages\";\nimport { SELECTED_DIALOG } from \"../actionTypes/selectedDialog\";\nimport ConnectyCube from \"connectycube\";\nimport { lazyFetchMessages, updateStatusMessages } from \"./reducer-function\";\nvar initial_state = {\n  dialog: {},\n  messages: []\n};\nexport default (function () {\n  var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial_state;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_MESSAGES:\n      {\n        var msgs = action.msgs;\n        var dialog = action.dialog;\n        return {\n          dialog: dialog,\n          messages: msgs\n        };\n      }\n    // case SELECTED_DIALOG: {\n    //   console.log(action)\n    //   const dialog = action.dialog;\n    //   return { ...messages, dialog: dialog };\n    // }\n\n    case PUSH_MESSAGE:\n      {\n        var msg = action.msg;\n\n        if (msg && msg.dialog_id == messages.dialog.connecty_dialog_id) {\n          if (msg.notif) {\n            var params = {\n              read: 1,\n              chat_dialog_id: msg.dialog_id\n            };\n            ConnectyCube.chat.message.update(\"\", params).then(function (result) {})[\"catch\"](function (error) {});\n          }\n\n          var _msgs = messages.messages.concat(action.msg);\n\n          return _objectSpread(_objectSpread({}, messages), {}, {\n            messages: _msgs\n          });\n        } else {\n          var userData = localStorage.getItem(\"user\");\n          userData = userData ? JSON.parse(userData) : \"\";\n\n          if (userData) {\n            var message = {\n              app_id: process.env.ONESIGNAL_APP_ID,\n              contents: {\n                \"en\": \"You recieved a new message.\"\n              },\n              filters: [{\n                \"field\": \"tag\",\n                \"key\": \"user\",\n                \"relation\": \"=\",\n                \"value\": userData.id\n              }]\n            };\n            fetch(\"https://onesignal.com/api/v1/notifications\", {\n              headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\",\n                Authorization: \"Basic \" + process.env.ONESIGNAL_REST_KEY\n              },\n              method: \"post\",\n              body: JSON.stringify(message) // body: JSON.stringify(data),\n\n            }).then(function (response) {\n              if (response.ok) {\n                return response.json();\n              } else {\n                throw Error(\"Request rejected with status \".concat(response.status));\n              }\n            }).then(function (responseData) {\n              console.log(\"responseDatasadsad\", responseData);\n              return responseData;\n            })[\"catch\"](function (error) {\n              return console.log(\"responseDatasadsad\", error);\n            });\n          }\n        }\n\n        return messages;\n      }\n\n    case DELETE_ALL_MESSAGES:\n      {\n        return initial_state;\n      }\n\n    default:\n      return initial_state;\n  }\n});","map":{"version":3,"sources":["C:/Users/91911/Downloads/frontend/src/redux/reducers/messages.js"],"names":["PUSH_MESSAGE","SET_MESSAGES","DELETE_ALL_MESSAGES","LAZY_FETCH_MESSAGES","UPDATE_MESSAGES","SELECTED_DIALOG","ConnectyCube","lazyFetchMessages","updateStatusMessages","initial_state","dialog","messages","action","type","msgs","msg","dialog_id","connecty_dialog_id","notif","params","read","chat_dialog_id","chat","message","update","then","result","error","concat","userData","localStorage","getItem","JSON","parse","app_id","process","env","ONESIGNAL_APP_ID","contents","filters","id","fetch","headers","Authorization","ONESIGNAL_REST_KEY","method","body","stringify","response","ok","json","Error","status","responseData","console","log"],"mappings":"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","sourcesContent":["import {\n  PUSH_MESSAGE,\n  SET_MESSAGES,\n  DELETE_ALL_MESSAGES,\n  LAZY_FETCH_MESSAGES,\n  UPDATE_MESSAGES,\n} from \"../actionTypes/messages\";\nimport { SELECTED_DIALOG } from \"../actionTypes/selectedDialog\";\nimport ConnectyCube from \"connectycube\";\n\nimport { lazyFetchMessages, updateStatusMessages } from \"./reducer-function\";\n\nlet initial_state = {\n  dialog: {},\n  messages: []\n}\n\nexport default (messages = initial_state, action) => {\n\n  switch (action.type) {\n    case SET_MESSAGES: {\n      const msgs = action.msgs;\n      const dialog = action.dialog;\n      return { dialog: dialog, messages: msgs };\n    }\n\n    // case SELECTED_DIALOG: {\n    //   console.log(action)\n    //   const dialog = action.dialog;\n    //   return { ...messages, dialog: dialog };\n    // }\n\n\n    case PUSH_MESSAGE: {\n      let msg = action.msg\n      if (msg && msg.dialog_id == messages.dialog.connecty_dialog_id) {\n        if (msg.notif) {\n          const params = {\n            read: 1,\n            chat_dialog_id: msg.dialog_id\n          };\n          ConnectyCube.chat.message\n            .update(\"\", params)\n            .then(result => {\n\n            })\n            .catch(error => { });\n        }\n        const msgs = messages.messages.concat(action.msg);\n        return { ...messages, messages: msgs };\n      } else {\n        let userData = localStorage.getItem(\"user\");\n        userData = userData ? JSON.parse(userData) : \"\";\n        if (userData) {\n          var message = {\n            app_id: process.env.ONESIGNAL_APP_ID,\n            contents: { \"en\": \"You recieved a new message.\" },\n            filters: [\n              { \"field\": \"tag\", \"key\": \"user\", \"relation\": \"=\", \"value\": userData.id },\n\n            ]\n          };\n          fetch(\"https://onesignal.com/api/v1/notifications\", {\n            headers: {\n              \"Content-Type\": \"application/json; charset=utf-8\",\n              Authorization: \"Basic \" + process.env.ONESIGNAL_REST_KEY,\n            },\n            method: \"post\",\n            body: JSON.stringify(message),\n            // body: JSON.stringify(data),\n          })\n            .then((response) => {\n              if (response.ok) {\n                return response.json();\n              } else {\n                throw Error(`Request rejected with status ${response.status}`);\n              }\n            })\n            .then((responseData) => {\n              console.log(\"responseDatasadsad\", responseData);\n              return responseData;\n            })\n            .catch((error) => console.log(\"responseDatasadsad\", error));\n        }\n\n\n      }\n      return messages\n\n    }\n\n    case DELETE_ALL_MESSAGES: {\n\n      return initial_state;\n    }\n\n    default:\n      return initial_state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}